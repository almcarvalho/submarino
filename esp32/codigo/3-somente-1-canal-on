// SUBMARINO ESP32 COM ANTENA (sem relés)
// LEDs + controle de SERVO pelo analógico esquerdo (PS5)
// LED VERMELHO (GPIO 14): status de conexão
// LED VERDE (GPIO 16): aceso se QUALQUER canal do relé estiver ligado; apagado se TODOS estiverem desligados.
// Relés: X/QUADRADO/TRIANGULO/BOLA acionam canais 1..4 do SerialRelay (modo exclusivo)

#include <ps5Controller.h>
#include <ESP32Servo.h>
#include <SerialRelay.h>

// LEDs
#define LED_VERMELHO 14
#define LED_VERDE    16

// Servo
#define SERVO_PIN    27
#define SERVO_MIN_US 500
#define SERVO_MAX_US 2500
Servo servo;

// === RELÉS ===
const byte NumModules = 1;
SerialRelay relays(25, 26, NumModules);  // DATA=25, CLOCK=26, 1 módulo 4 canais

// === VARIÁVEIS DE CONTROLE DOS CANAIS ===
bool canal1Ligado = false;
bool canal2Ligado = false;
bool canal3Ligado = false;
bool canal4Ligado = false;

// Atualiza LED verde conforme estado dos relés
void updateLedVerdeFromRelays() {
  bool algumLigado = canal1Ligado || canal2Ligado || canal3Ligado || canal4Ligado;
  digitalWrite(LED_VERDE, algumLigado ? HIGH : LOW);
}

// Aplica o estado atual das variáveis no módulo
void aplicarEstadosNosRelees() {
  relays.SetRelay(1, canal1Ligado ? SERIAL_RELAY_ON : SERIAL_RELAY_OFF, 1);
  relays.SetRelay(2, canal2Ligado ? SERIAL_RELAY_ON : SERIAL_RELAY_OFF, 1);
  relays.SetRelay(3, canal3Ligado ? SERIAL_RELAY_ON : SERIAL_RELAY_OFF, 1);
  relays.SetRelay(4, canal4Ligado ? SERIAL_RELAY_ON : SERIAL_RELAY_OFF, 1);
  updateLedVerdeFromRelays();
}

// Helper: desliga todos os canais
void desligarTodosCanais() {
  canal1Ligado = canal2Ligado = canal3Ligado = canal4Ligado = false;
  aplicarEstadosNosRelees();
  Serial.println("Todos os canais OFF");
}

// Helper: liga apenas um canal (modo exclusivo)
void setCanalExclusivo(uint8_t canal) {
  canal1Ligado = canal2Ligado = canal3Ligado = canal4Ligado = false;
  switch (canal) {
    case 1: canal1Ligado = true; break;
    case 2: canal2Ligado = true; break;
    case 3: canal3Ligado = true; break;
    case 4: canal4Ligado = true; break;
  }
  aplicarEstadosNosRelees();
  Serial.printf("Canal %u -> ON (exclusivo)\n", canal);
}

// === Config do analógico (servo) ===
const int DEADZONE = 10;
const int SERVO_MIN_ANGLE = 0;
const int SERVO_MAX_ANGLE = 180;
int lastAngle = 90;
const int MAX_STEP = 4;

int analogToAngle(int v) {
  if (abs(v) < DEADZONE) v = 0;
  float n = (float)v / 127.0f;
  int angle = (int)(90.0f + n * 90.0f);
  if (angle < SERVO_MIN_ANGLE) angle = SERVO_MIN_ANGLE;
  if (angle > SERVO_MAX_ANGLE) angle = SERVO_MAX_ANGLE;
  return angle;
}
int smoothStep(int current, int target, int maxStep) {
  if (target > current) return min(current + maxStep, target);
  if (target < current) return max(current - maxStep, target);
  return current;
}

// === ESTADOS ANTERIORES (para detectar borda de subida) ===
bool prevX = false, prevS = false, prevT = false, prevC = false;

// Trata botões do PS5 para modo exclusivo nos relés
void handleRelayButtons() {
  if (!ps5.isConnected()) return;

  bool xNow = ps5.Cross();
  bool sNow = ps5.Square();
  bool tNow = ps5.Triangle();
  bool cNow = ps5.Circle();

  // X -> canal 1
  if (xNow && !prevX) {
    if (canal1Ligado) {
      desligarTodosCanais();  // toggle do mesmo canal -> desliga
    } else {
      setCanalExclusivo(1);   // liga 1 e garante exclusividade
    }
  }
  // QUADRADO -> canal 2
  if (sNow && !prevS) {
    if (canal2Ligado) {
      desligarTodosCanais();
    } else {
      setCanalExclusivo(2);
    }
  }
  // TRIANGULO -> canal 3
  if (tNow && !prevT) {
    if (canal3Ligado) {
      desligarTodosCanais();
    } else {
      setCanalExclusivo(3);
    }
  }
  // BOLA -> canal 4
  if (cNow && !prevC) {
    if (canal4Ligado) {
      desligarTodosCanais();
    } else {
      setCanalExclusivo(4);
    }
  }

  prevX = xNow;
  prevS = sNow;
  prevT = tNow;
  prevC = cNow;
}

// Track da conexão para acionar desligamento só na transição
bool estavaConectado = false;

void setup() {
  Serial.begin(9600);

  pinMode(LED_VERMELHO, OUTPUT);
  pinMode(LED_VERDE, OUTPUT);
  digitalWrite(LED_VERMELHO, LOW);
  digitalWrite(LED_VERDE, LOW);

  servo.attach(SERVO_PIN, SERVO_MIN_US, SERVO_MAX_US);
  servo.write(lastAngle);

  // Inicializa relés desligados
  desligarTodosCanais();

  ps5.begin("58:10:31:bd:52:38");
  Serial.println("Pronto para conectar ao controle PS5...");
}

void loop() {
  bool conectado = ps5.isConnected();

  if (conectado) {
    if (!estavaConectado) {
      Serial.println("Controle conectado");
    }
    estavaConectado = true;

    digitalWrite(LED_VERMELHO, HIGH);

    int lx = ps5.LStickX();
    int targetAngle = analogToAngle(lx);
    lastAngle = smoothStep(lastAngle, targetAngle, MAX_STEP);
    servo.write(lastAngle);

    handleRelayButtons();

    delay(10);
  } else {
    // Se acabou de perder a conexão, desliga tudo imediatamente
    if (estavaConectado) {
      Serial.println("Controle desconectado - desligando todos os canais");
      desligarTodosCanais();
      prevX = prevS = prevT = prevC = false; // evita falsos toggles no retorno
    }
    estavaConectado = false;

    // LED vermelho piscando enquanto desconectado
    digitalWrite(LED_VERMELHO, HIGH);
    delay(300);
    digitalWrite(LED_VERMELHO, LOW);
    delay(300);

    // Retorna servo suavemente ao centro
    if (lastAngle != 90) {
      lastAngle = smoothStep(lastAngle, 90, MAX_STEP);
      servo.write(lastAngle);
    }
  }
}
